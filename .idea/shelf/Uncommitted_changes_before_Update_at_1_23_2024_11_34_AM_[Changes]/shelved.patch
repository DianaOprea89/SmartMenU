Index: front-end/src/views/OptionMenu.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\r\n  <div class=\"container\">\r\n    <div class=\"m-2 icon-container\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-bar-left\" viewBox=\"0 0 16 16\">\r\n        <path fill-rule=\"evenodd\" d=\"M12.5 15a.5.5 0 0 1-.5-.5v-13a.5.5 0 0 1 1 0v13a.5.5 0 0 1-.5.5M10 8a.5.5 0 0 1-.5.5H3.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L3.707 7.5H9.5a.5.5 0 0 1 .5.5\"/>\r\n      </svg>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-7\">\r\n        <h1>{{ restaurantData.name }}</h1>\r\n        <p>{{ restaurantData.aboutUs }}</p>\r\n        <p>{{ restaurantData.address }}</p>\r\n        <p>{{ restaurantData.phoneNumber }}</p>\r\n      </div>\r\n      <div class=\"col-5\">\r\n        <img :src=\"restaurantData.logoImage\" class=\"fixed-size-img\" alt=\"the restaurant pictures\">\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-12\">\r\n        <!-- Button to open the custom dialog -->\r\n        <button class=\"btn btn-primary auto-width-button m-5\" @click=\"openDialog\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-plus-lg icon\"\r\n               viewBox=\"0 0 16 16\">\r\n            <path fill-rule=\"evenodd\"\r\n                  d=\"M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z\"/>\r\n          </svg>\r\n          Meniu Nou\r\n        </button>\r\n        <span class=\"lighter-text smaller-text\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-left\"\r\n               viewBox=\"0 0 16 16\">\r\n            <path fill-rule=\"evenodd\"\r\n                  d=\"M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z\"/>\r\n          </svg> creeaza un nou meniu\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"restaurantData && restaurantData.menuOptions\">\r\n      <div v-for=\"(menuOption, index) in restaurantData.menuOptions\" :key=\"index\" class=\"menu-option menu-layout\">\r\n        <div class=\"menu-option-content\" v-if=\"menuOption\">\r\n          <div class=\"submenu-list\">\r\n            <div class=\"menu-option-info\">\r\n\r\n              <div class=\"addedRestaurants\">\r\n                <img :src=\"menuOption.photoLink\" alt=\"added item\" class=\"menu-option-image\">\r\n              </div>\r\n              <div class=\"open-menu-option\">\r\n                <div class=\"form-group\" @click=\"openMenuOption(menuOption)\">\r\n                  <p class=\"menu-option-name\">{{ menuOption.optionName }}</p>\r\n                </div>\r\n              </div>\r\n              <div class=\"image-edit-icon\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-pencil\"\r\n                     viewBox=\"0 0 16 16\" @click=\"openEditDialog(menuOption)\">\r\n                  <path d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\"/>\r\n                </svg>\r\n              </div>\r\n              <div>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-trash3\" viewBox=\"0 0 16 16\" @click=\"removeMenuItem(menuOption._id)\">\r\n                  <path d=\"M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5\"/>\r\n                </svg>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Custom Dialog -->\r\n    <div class=\"custom-dialog\" v-if=\"showDialog\">\r\n      <div class=\"custom-dialog-content\">\r\n        <h2>Adauga Meniu Nou </h2>\r\n        <div class=\"form-group\">\r\n          <label for=\"photoLink\"> Link poza:</label>\r\n          <input type=\"text\" id=\"photoLink\" v-model=\"optionMenu.photoLink\"/>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"itemName\">Nume optiune Meniu:</label>\r\n          <input type=\"text\" id=\"itemName\" v-model=\"optionMenu.optionName\"/>\r\n        </div>\r\n        <div class=\"dialog-buttons\">\r\n          <button class=\"btn btn-secondary cancel-button m-3\" @click=\"showDialog = false\">Renunta</button>\r\n          <button class=\"btn btn-primary add-button m-3\" @click=\"addItem\">Adauga</button>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Custom Dialog for Editing Menu Option -->\r\n    <div class=\"custom-dialog\" v-if=\"showDialogOption\">\r\n      <div class=\"custom-dialog-content\">\r\n        <h2>Editeaza Meniu Existent</h2>\r\n        <div class=\"form-group m-3\">\r\n          <label for=\"photoLink\">Link poza:</label>\r\n          <input type=\"text\" id=\"photoLink\" v-model=\"editingMenuOption.photoLink\" />\r\n        </div>\r\n        <div class=\"form-group m-3\">\r\n          <label for=\"itemName\">Nume optiune Meniu: </label>\r\n          <input type=\"text\" id=\"itemName\" v-model=\"editingMenuOption.optionName\" />\r\n        </div>\r\n        <div class=\"dialog-buttons\">\r\n          <button class=\"btn btn-secondary cancel-button m-3\" @click=\"showDialogOption = false\">Renunta</button>\r\n          <button class=\"btn btn-primary add-button m-3\" @click=\"editMenu\">Editeaza</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"../api/api.js\";\r\nimport {getAuthToken} from \"@/utility/utility\";\r\nimport {mapGetters} from \"vuex\";\r\n\r\nexport default {\r\n  name: \"OptionMenu\",\r\n  data() {\r\n    return {\r\n      showDialog: false,\r\n      showDialogOption: false,\r\n      optionMenu: {\r\n        photoLink: \"\",\r\n        optionName: \"\",\r\n      },\r\n      restaurants: [],\r\n      newOptionMenu: { optionName: '', photoLink: '' }, // Initialize with default values\r\n      editingMenuOption: null,\r\n      items: [],\r\n      localRestaurantData: {}, // Local data to store restaurant info\r\n    };\r\n  },\r\n  props: {\r\n    restaurantName: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  computed: {\r\n    restaurantData() {\r\n      console.log(\"localRestaurantData\",this.localRestaurantData);\r\n      return this.localRestaurantData || {};\r\n    },\r\n    ...mapGetters({\r\n      getUserId: \"getUserId\"\r\n    }),\r\n  },\r\n  methods: {\r\n    openDialog() {\r\n      this.optionMenu = { photoLink: \"\", optionName: \"\" }; // Reset the form\r\n      this.showDialog = true;\r\n    },\r\n    editOption(menuOption) {\r\n      if (menuOption) {\r\n        this.editingMenuOption = JSON.parse(JSON.stringify(menuOption));\r\n        this.showDialogOption = true;\r\n      }\r\n    },\r\n    openEditDialog(menuOption) {\r\n      this.editingMenuOption = JSON.parse(JSON.stringify(menuOption)); // Clone the current menu option\r\n      this.showDialogOption = true; // Open the dialog\r\n    },\r\n    async removeMenuItem(menuOptionId) {\r\n      const restaurantId = this.restaurantData._id;\r\n      console.log('Removing menu option with ID:', menuOptionId);\r\n      try {\r\n        const userId = this.$store.getters.getUserId;\r\n        console.log('Removing menu option with ID:', menuOptionId);\r\n        const apiUrl = `/api/removeOptionMenuRestaurants/${userId}/${restaurantId}/${menuOptionId}`;\r\n        const authToken = getAuthToken();\r\n        const response = await api.delete(apiUrl, {\r\n          headers: {Authorization: `Bearer ${authToken}`}\r\n        });\r\n        if (response && response.status === 200) {\r\n          // The server has successfully removed the menu item, now update the local state\r\n          const updatedMenuOptions = this.restaurantData.menuOptions.filter(option => option._id !== menuOptionId);\r\n          this.restaurantData.menuOptions = updatedMenuOptions;\r\n          console.log('Menu option removed successfully');\r\n        } else {\r\n          console.error('Error removing menu option. Status:', response ? response.status : 'Unknown');\r\n        }\r\n      } catch (error) {\r\n        console.error('An error occurred while removing menu option:', error);\r\n        // Handle error response if needed\r\n      }\r\n    },\r\n    addItem() {\r\n      const newItem = {\r\n        photoLink: this.optionMenu.photoLink,\r\n        optionName: this.optionMenu.optionName,\r\n      };\r\n\r\n      api\r\n          .post(\"/api/addOptionMenuRestaurants\", {\r\n            userId: this.$store.state.user.id,\r\n            name: this.restaurantName,\r\n            newItem,\r\n          })\r\n          .then((response) => {\r\n            if (response.status === 201) {\r\n              this.items.push(newItem);\r\n              this.optionMenu.photoLink = \"\";\r\n              this.optionMenu.optionName = \"\";\r\n              this.showDialog = false;\r\n              this.$router.push(`/restaurant/${encodeURIComponent(this.restaurantName.trim())}`);\r\n\r\n            } else {\r\n              console.error(\"Error adding menu option:\", response.data.message);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error adding menu option:\", error);\r\n          });\r\n    },\r\n    async editMenu() {\r\n      const userId = this.getUserId;\r\n      const restaurantId = this.localRestaurantData._id;\r\n      const menuOptionId = this.editingMenuOption._id;\r\n\r\n      try {\r\n        const response = await api.put(`/api/editOptionMenuRestaurants/${userId}/${restaurantId}/${menuOptionId}`,\r\n            {\r\n              photoLink: this.editingMenuOption.photoLink,\r\n              optionName: this.editingMenuOption.optionName\r\n            },\r\n            {\r\n              headers: { Authorization: `Bearer ${getAuthToken()}` }\r\n            }\r\n        );\r\n\r\n        if (response && response.status === 200) {\r\n\r\n          const index = this.localRestaurantData.menuOptions.findIndex(option => option._id === menuOptionId);\r\n          if (index !== -1) {\r\n            this.localRestaurantData.menuOptions[index] = { ...this.editingMenuOption };\r\n          }\r\n          console.log('Menu option updated successfully');\r\n          this.showDialogOption = false;\r\n        } else {\r\n          console.error('Error updating menu option. Status:', response ? response.status : 'Unknown');\r\n        }\r\n      } catch (error) {\r\n        console.error('An error occurred while updating menu option:', error);\r\n      }\r\n    },\r\n    openMenuOption(menuOption) {\r\n\r\n      this.$router.push({\r\n        name: 'SubMenuOption',\r\n        params: {\r\n          restaurantName: this.restaurantName,\r\n          menuOption: menuOption.optionName\r\n        }\r\n      });\r\n    },\r\n    async fetchRestaurants() {\r\n      try {\r\n        const response = await api.get('/api/userData', {\r\n          headers: {Authorization: `Bearer ${getAuthToken()}`}\r\n        });\r\n\r\n        if (response && response.status === 200) {\r\n          this.restaurants = response.data.restaurants; // Update local state\r\n        } else {\r\n          console.error('Failed to fetch restaurants. Status:', response ? response.status : 'Unknown');\r\n        }\r\n      } catch (error) {\r\n        console.error('An error occurred while fetching restaurants:', error);\r\n      }\r\n    },\r\n  },\r\n  async created() {\r\n\r\n    try {\r\n      await this.fetchRestaurants();\r\n      const response = await api.get(`/api/restaurant/${encodeURIComponent(this.restaurantName)}`, {\r\n        headers: { Authorization: `Bearer ${getAuthToken()}` }\r\n      });\r\n\r\n      if (response && response.status === 200) {\r\n        this.localRestaurantData = response.data;\r\n      } else {\r\n        console.error('Failed to fetch restaurant details. Status:', response ? response.status : 'Unknown');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching restaurant details:', error);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n\r\n.fixed-size-img {\r\n  width: 100px;\r\n  height: 100px;\r\n  object-fit: cover;\r\n  border-radius: 5px;\r\n}\r\n\r\n.custom-dialog {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 60%;\r\n  max-width: 500px;\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  z-index: 1000;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);\r\n}\r\n.submenu-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  margin: 0;\r\n}\r\n.menu-layout {\r\n  display: grid;\r\n  grid-template-columns: 1fr 3fr;\r\n  gap: 2rem;\r\n}\r\n\r\n.custom-dialog-content input[type=\"text\"] {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #ced4da; /* Bootstrap's default border color for input */\r\n  border-radius: 0.25rem; /* Bootstrap's default border radius for input */\r\n}\r\n\r\n\r\n.menu-option {\r\n  margin-bottom: 10px; /* Space between each menu option */\r\n}\r\n\r\n\r\n\r\n.menu-option-info {\r\n\r\n  margin-right: 6px; /* Adds margin to the right */\r\n}\r\n\r\n.menu-option-info,\r\n.addedRestaurants,\r\n.image-edit-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.addedRestaurants {\r\n\r\n  margin-right: 5px;\r\n}\r\n\r\n.image-edit-icon {\r\n  flex-grow: 1;\r\n  padding: 10px;\r\n}\r\n\r\n.menu-option-info {\r\n  display: flex;\r\n  position: relative;\r\n}\r\n\r\n.addedRestaurants {\r\n  position: relative;\r\n  margin-right: 10px;\r\n}\r\n\r\n.menu-option-image {\r\n  width: 100px;\r\n  height: 100px;\r\n  object-fit: cover;\r\n  border-radius: 5px;\r\n}\r\n\r\n.menu-option-content svg,\r\n.form-group svg {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  width: 16px;\r\n  height: 16px;\r\n  cursor: pointer;\r\n}\r\n\r\n.menu-option-name {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 1em;\r\n  background-color: #ffffff;\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n  position: relative;\r\n  margin-right: 10px;\r\n}\r\n.open-menu-option{\r\n  cursor: pointer;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n}\r\n\r\n.form-group svg {\r\n  width: 12px;\r\n  height: 12px;\r\n  margin-left: 5px;\r\n}\r\n\r\n.image-edit-icon {\r\n  position: relative;\r\n  margin-right: 10px;\r\n}\r\n\r\n\r\n.image-edit-icon svg {\r\n  width: 16px;\r\n  height: 16px;\r\n  cursor: pointer;\r\n}\r\n.icon-container svg {\r\n  height: 24px;\r\n  width: 24px;\r\n  fill: currentColor;\r\n}\r\n\r\n\r\n.icon-container svg {\r\n  stroke-width: 2;\r\n}\r\n\r\n\r\n.icon-container {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n}\r\n\r\n</style>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front-end/src/views/OptionMenu.vue b/front-end/src/views/OptionMenu.vue
--- a/front-end/src/views/OptionMenu.vue	(revision d178b92cf41c91e988ba9eda1317b786084f688f)
+++ b/front-end/src/views/OptionMenu.vue	(date 1706002458264)
@@ -422,7 +422,6 @@
   margin-right: 10px;
 }
 
-
 .image-edit-icon svg {
   width: 16px;
   height: 16px;
@@ -434,12 +433,10 @@
   fill: currentColor;
 }
 
-
 .icon-container svg {
   stroke-width: 2;
 }
 
-
 .icon-container {
   display: flex;
   justify-content: flex-end;
Index: back-end/src/server.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors';\r\nimport bcrypt from 'bcrypt';\r\nimport dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport mongoose from 'mongoose';\r\nimport User from './schemas/CombinedSchema.js';\r\nimport 'express-async-errors';\r\n\r\n\r\n\r\nimport apiOut from './apiOut.js';\r\n\r\ndotenv.config();\r\n\r\nconst app = express();\r\n\r\nconst corsOptions = {\r\n    origin: '*',\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    preflightContinue: false,\r\n    optionsSuccessStatus: 204,\r\n};\r\n\r\napp.use(cors(corsOptions));\r\napp.use(bodyParser.json());\r\n\r\nconsole.log(\"Connecting to MongoDB at:\", process.env.MONGODB_URI);\r\n\r\nmongoose.connect(process.env.MONGODB_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n}).then(() => {\r\n    console.log('Connected to MongoDB...');\r\n}).catch(err => {\r\n    console.error('Could not connect to MongoDB...', err);\r\n    process.exit(1); // Exit with a failure code\r\n});\r\n\r\napp.use((req, res, next) => {\r\n    console.log(`Request received: ${req.method} ${req.url}`);\r\n    next();\r\n});\r\n\r\n\r\napp.get('/api/restaurant/:name', async (req, res) => {\r\n    try {\r\n        const { name } = req.params;\r\n        // Assuming the restaurant name is unique. Adjust the query as needed.\r\n        const restaurant = await User.findOne({ \"restaurants.name\": name }, { \"restaurants.$\": 1 });\r\n\r\n        if (!restaurant) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        // Send the first restaurant in the array, as the query returns an array\r\n        res.status(200).json(restaurant.restaurants[0]);\r\n    } catch (error) {\r\n        console.error('Error fetching restaurant:', error);\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n});\r\n\r\napp.get('/api/userData', async (req, res) => {\r\n    const token = req.headers.authorization?.split(' ')[1]; // Authorization: 'Bearer TOKEN'\r\n\r\n    if (!token) {\r\n        return res.status(401).json({ message: 'No token provided' });\r\n    }\r\n\r\n    try {\r\n\r\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n\r\n        console.log('Decoded token:', decoded);\r\n\r\n\r\n        const user = await User.findById(decoded.userId).populate('restaurants');\r\n\r\n        console.log('User data from database:', user);\r\n\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        res.status(200).json({\r\n            name: user.username,\r\n            email: user.email,\r\n            id: user._id,\r\n            restaurants: user.restaurants, // Make sure to include populated restaurants here\r\n        });\r\n    } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n        if (error.name === 'TokenExpiredError') {\r\n            res.status(401).json({ message: 'Token expired' });\r\n        } else if (error.name === 'JsonWebTokenError') {\r\n            res.status(401).json({ message: 'Invalid token' });\r\n        } else {\r\n            res.status(500).json({ message: 'Internal server error' });\r\n        }\r\n    }\r\n});\r\n\r\n\r\napp.put('/api/editRestaurant/:userId/:restaurantId', async (req, res) => {\r\n    try {\r\n        const { userId, restaurantId } = req.params;\r\n        const updatedData = req.body; // Updated restaurant data from the request body\r\n\r\n        // Find the user by userId\r\n        const user = await User.findById(userId);\r\n\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        // Find the restaurant in the user's restaurants array by restaurantId\r\n        const restaurant = user.restaurants.find((r) => r._id.toString() === restaurantId);\r\n\r\n        if (!restaurant) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        // Update the restaurant's data with the new details\r\n        Object.assign(restaurant, updatedData);\r\n\r\n        await user.save();\r\n\r\n        res.status(200).json({\r\n            message: 'Restaurant updated successfully',\r\n            updatedRestaurant: restaurant,\r\n        });\r\n    } catch (error) {\r\n        console.error('Error updating restaurant:', error);\r\n        res.status(500).json({ message: 'Error updating restaurant' });\r\n    }\r\n});\r\n\r\napp.delete('/api/removeRestaurant/:userId/:restaurantId', async (req, res) => {\r\n    console.log('DELETE request to /api/removeRestaurant');\r\n    const { userId, restaurantId } = req.params;\r\n    console.log('Received userId:', userId);\r\n    console.log('Received restaurantId:', restaurantId);\r\n\r\n    try {\r\n        const user = await User.findById(userId);\r\n\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n\r\n        const updatedRestaurants = user.restaurants.filter(restaurant => restaurant._id.toString() !== restaurantId);\r\n\r\n\r\n        user.restaurants = updatedRestaurants;\r\n\r\n        await user.save();\r\n\r\n        console.log(`Removed restaurant with id ${restaurantId} from the user's restaurants`);\r\n\r\n        res.status(200).json({ message: 'Restaurant removed successfully' });\r\n    } catch (error) {\r\n        console.error('Error deleting restaurant:', error);\r\n        res.status(500).json({ message: 'Error deleting restaurant' });\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\napp.post('/api/register', async (req, res) => {\r\n\r\n    let apiOutObj = new apiOut(res);\r\n\r\n\r\n    // -----------------------------\r\n    // 1. input checks\r\n    const { name, email, password, passwordConfirm } = req.body;\r\n\r\n    if (!name || !email || !password || !passwordConfirm) {\r\n        apiOutObj.addError('name', 'Name is required');\r\n    }\r\n\r\n    if (password !== passwordConfirm) {\r\n        apiOutObj.addError('password', 'Passwords do not match');\r\n    }\r\n\r\n    // Simple regex for basic email validation\r\n    const emailRegex = /^(([^<>()\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (!emailRegex.test(email)) {\r\n        apiOutObj.addError('email', 'Invalid email format');\r\n        //return res.status(400).json({ message: 'Invalid email format' });\r\n    }\r\n\r\n    // guard for input checks\r\n    if (apiOutObj.hasErrors()) {\r\n        apiOutObj.sendReply();\r\n        return;\r\n    }\r\n\r\n    // -----------------------------\r\n    // 2. db checks\r\n    try {\r\n        const existingUser = await User.findOne({ email });\r\n        if (existingUser) {\r\n            apiOutObj.addError('email', 'Email already in use');\r\n        }\r\n    } catch (error) {\r\n        apiOutObj.addError('db', error.message);\r\n        return;\r\n    }\r\n\r\n    // guard for db checks\r\n    if (apiOutObj.hasErrors()) {\r\n        apiOutObj.sendReply();\r\n        return;\r\n    }\r\n\r\n\r\n    // -----------------------------\r\n    // 3. logic\r\n\r\n    try {\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n        const user = new User({\r\n            username: name, // Ensure this matches your schema\r\n            email,\r\n            passwordHash: hashedPassword\r\n        });\r\n        await user.save();\r\n    } catch (error) {\r\n        apiOutObj.addError('db', error.message);\r\n        return;\r\n    }\r\n\r\n\r\n\r\n    apiOutObj.sendReply();\r\n\r\n});\r\n\r\n\r\n\r\napp.post('/api/login', async (req, res) => {\r\n    try {\r\n        const { email, password } = req.body;\r\n\r\n        const user = await User.findOne({ email });\r\n        if (!user) {\r\n            return res.status(400).json({ message: 'User does not exist' });\r\n        }\r\n\r\n        const validPassword = await bcrypt.compare(password, user.passwordHash);\r\n\r\n        if (!validPassword) {\r\n            return res.status(400).json({ message: 'Invalid password' });\r\n        }\r\n\r\n        const token = jwt.sign(\r\n            { userId: user._id, email: user.email },\r\n            process.env.JWT_SECRET,\r\n            { expiresIn: process.env.JWT_EXPIRES_IN }\r\n        );\r\n\r\n        res.status(200).json({\r\n            message: 'Logged in successfully',\r\n            token,\r\n            user: {\r\n                name: user.username,\r\n                email: user.email\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Login error:', error);\r\n        res.status(500).json({ message: 'Error logging in user' });\r\n    }\r\n});\r\n\r\n\r\n\r\napp.get('/api/getRestaurants', async (req, res) => {\r\n    const token = req.headers.authorization ? req.headers.authorization.split(' ')[1] : null; // Authorization: 'Bearer TOKEN'\r\n\r\n    console.log('Received token:', token); // Log the received token\r\n\r\n    if (!token) {\r\n        return res.status(401).json({ message: 'No token provided' });\r\n    }\r\n\r\n    try {\r\n\r\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n\r\n        console.log('Decoded token:', decoded); // Log the decoded token\r\n\r\n        // Use the user ID in the decoded token to look up the user in the database\r\n        const user = await User.findById(decoded.userId).populate('restaurants');\r\n\r\n        console.log('User data from database:', user);\r\n        console.log('Decoded token:', decoded);\r\n\r\n\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n\r\n        res.status(200).json(user.restaurants);\r\n    } catch (error) {\r\n        console.error(error);\r\n        if (error.name === 'TokenExpiredError') {\r\n            res.status(401).json({ message: 'Token expired' });\r\n        } else if (error.name === 'JsonWebTokenError') {\r\n            res.status(401).json({ message: 'Invalid token' });\r\n        } else {\r\n            res.status(500).json({ message: 'Internal server error' });\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\n//Post endpoint to add a restaurant//\r\napp.post('/api/addRestaurants', async (req, res) => {\r\n    try {\r\n        const { userId, name, address , phoneNumber, aboutUs ,logoImage, newItem } = req.body;\r\n\r\n        // Find the user by userId\r\n        const user = await User.findById(userId);\r\n\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n\r\n        const existingRestaurant = user.restaurants.find((restaurant) => restaurant.name === name);\r\n\r\n        if (existingRestaurant) {\r\n            return res.status(400).json({ message: 'Restaurant with this name already exists' });\r\n        }\r\n\r\n\r\n        const newRestaurant = {\r\n            name,\r\n            address,\r\n            phoneNumber,\r\n            logoImage,\r\n            aboutUs,\r\n\r\n            menuOptions: [newItem],\r\n        };\r\n\r\n\r\n        user.restaurants.push(newRestaurant);\r\n\r\n\r\n        await user.save();\r\n\r\n        res.status(201).json({\r\n            message: 'Restaurant created and associated with the user',\r\n            restaurant: newRestaurant,\r\n        });\r\n    } catch (error) {\r\n        console.error('Error creating restaurant:', error);\r\n        res.status(500).json({ message: 'Error creating restaurant' });\r\n    }\r\n});\r\n\r\n\r\n//Post endpoint to add an Option Menu//\r\napp.post('/api/addOptionMenuRestaurants', async (req, res) => {\r\n    try {\r\n        const { userId, name, newItem } = req.body;\r\n\r\n        // Find the user by userId\r\n        const user = await User.findById(userId);\r\n\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        const existingRestaurant = user.restaurants.find((restaurant) => restaurant.name === name);\r\n\r\n        if (!existingRestaurant) {\r\n            return res.status(400).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        // Add the new menu option to the restaurant's menuOptions array\r\n        existingRestaurant.menuOptions.push(newItem);\r\n\r\n        await user.save();\r\n\r\n        res.status(201).json({\r\n            message: 'Menu option added to the restaurant',\r\n            newItem: newItem,\r\n        });\r\n    } catch (error) {\r\n        console.error('Error adding menu option:', error);\r\n        res.status(500).json({ message: 'Error adding menu option' });\r\n    }\r\n});\r\n\r\n\r\n//Post endpoint to add a subOption //\r\napp.post('/api/addSubOptionMenuRestaurants', async (req, res) => {\r\n    try {\r\n        const { userId, name, menuOptionName, newSubMenuItem } = req.body;\r\n\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        const restaurant = user.restaurants.find(r => r.name === name);\r\n        if (!restaurant) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        const menuOption = restaurant.menuOptions.find(option => option.optionName === menuOptionName);\r\n        if (!menuOption) {\r\n            return res.status(404).json({ message: 'Menu option not found' });\r\n        }\r\n\r\n        menuOption.subMenuOptions.push(newSubMenuItem);\r\n        await user.save();\r\n\r\n        res.status(201).json({ message: 'Sub-menu item added successfully', newSubMenuItem });\r\n    } catch (error) {\r\n        console.error('Error adding sub-menu item:', error);\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n});\r\n\r\n\r\n//Put endpont to edit a mealOption//\r\napp.put('/api/editMealOption/:userId/:restaurantId/:menuOptionId/:subMenuOptionId/:mealOptionId', async (req, res) => {\r\n    try {\r\n        const { userId, restaurantId, menuOptionId, subMenuOptionId, mealOptionId } = req.params;\r\n        const { photoLink,optionName,quantity,ingredients,price,description,unit } = req.body;\r\n\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        const restaurant = user.restaurants.id(restaurantId);\r\n        if (!restaurant) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        const menuOption = restaurant.menuOptions.id(menuOptionId);\r\n        if (!menuOption) {\r\n            return res.status(404).json({ message: 'Menu option not found' });\r\n        }\r\n\r\n        const subMenuOption = menuOption.subMenuOptions.id(subMenuOptionId);\r\n        if (!subMenuOption) {\r\n            return res.status(404).json({ message: 'Sub-menu option not found' });\r\n        }\r\n        const mealOption = subMenuOption.mealOptions.id(mealOptionId);\r\n        if(!mealOptions) {\r\n            return res.status(404).json({ message: 'Meal  option not found' });\r\n        }\r\n\r\n        // Update the Meal option\r\n        mealOption.photoLink = photoLink || mealOption.photoLink;\r\n        mealOption.optionName = optionName || mealOption.optionName;\r\n        mealOption.quantity = quantity || mealOption.quantity;\r\n        mealOption.ingredients = ingredients || mealOption.ingredients;\r\n        mealOption.price = price || mealOption.price;\r\n        mealOption.description = description || mealOption.description;\r\n        mealOption.unit = unit || mealOption.unit;\r\n\r\n        await user.save();\r\n\r\n        res.status(200).json({\r\n            message: 'Meal option updated successfully',\r\n            updatedSubMenuOption: subMenuOption\r\n        });\r\n    } catch (error) {\r\n        console.error('Error updating sub-menu option:', error);\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n});\r\n\r\n\r\n// delete endpoint for already dispalyed meal option//\r\n\r\napp.delete('/api/removeMealOption/:userId/:restaurantId/:menuOptionId/:subMenuOptionId/:mealOptionId', async (req, res) => {\r\n    console.log(\"DELETE request received with params:\", req.params);\r\n    try {\r\n        const { userId, restaurantId, menuOptionId, subMenuOptionId, mealOptionId } = req.params;\r\n        console.log(\"Received parameters for deletion:\", req.params);\r\n\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n            console.error('User not found:', userId);\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        const restaurant = user.restaurants.id(restaurantId);\r\n        if (!restaurant) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        const menuOption = restaurant.menuOptions.id(menuOptionId);\r\n        if (!menuOption) {\r\n            return res.status(404).json({ message: 'Menu option not found' });\r\n        }\r\n\r\n        const subMenuOption = menuOption.subMenuOptions.id(subMenuOptionId);\r\n        if (!subMenuOption) {\r\n            return res.status(404).json({ message: 'Sub-menu option not found' });\r\n        }\r\n\r\n        // Check if the meal option exists\r\n        const mealOptionExists = subMenuOption.mealOptions.some(mo => mo._id.toString() === mealOptionId);\r\n        if (!mealOptionExists) {\r\n            return res.status(404).json({ message: 'Meal option not found' });\r\n        }\r\n\r\n        // Remove the meal option using pull\r\n        subMenuOption.mealOptions.pull(mealOptionId);\r\n        await user.save();\r\n\r\n        res.status(200).json({ message: 'Meal option removed successfully' });\r\n    } catch (error) {\r\n        console.error('Error in deleteMealOption:', error);\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n});\r\n\r\n\r\n\r\n//edit enpoint for already displayed mealOption//\r\napp.put('/api/updateMealOption/:userId/:restaurantId/:menuOptionId/:subMenuOptionId/:mealOptionId', async (req, res) => {\r\n    try {\r\n        const { userId, restaurantId, menuOptionId, subMenuOptionId, mealOptionId } = req.params;\r\n        const { photoLink, optionName, quantity, ingredients, price, description, unit } = req.body;\r\n\r\n        // Log the IDs received in the request\r\n        console.log('IDs received:', { userId, restaurantId, menuOptionId, subMenuOptionId, mealOptionId });\r\n\r\n        // Find the user and check if exists\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        // Log the query parameters for debugging\r\n        console.log('Querying for restaurant:', restaurantId);\r\n        const restaurant = user.restaurants.id(restaurantId);\r\n\r\n        // More logging\r\n        console.log('Restaurant found:', restaurant);\r\n        if (!restaurant) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        // Log for debugging menuOption and subMenuOption\r\n        console.log('Querying for menuOption:', menuOptionId);\r\n        const menuOption = restaurant.menuOptions.id(menuOptionId);\r\n        console.log('menuOption found:', menuOption);\r\n        if (!menuOption) {\r\n            return res.status(404).json({ message: 'Menu option not found' });\r\n        }\r\n\r\n        console.log('Querying for subMenuOption:', subMenuOptionId);\r\n        const subMenuOption = menuOption.subMenuOptions.id(subMenuOptionId);\r\n        console.log('subMenuOption found:', subMenuOption);\r\n        if (!subMenuOption) {\r\n            return res.status(404).json({ message: 'Sub-menu option not found' });\r\n        }\r\n\r\n        const mealOption = subMenuOption.mealOptions.id(mealOptionId);\r\n        if (!mealOption) {\r\n            return res.status(404).json({ message: 'Meal option not found' });\r\n        }\r\n\r\n        // Correctly access properties from req.body\r\n        mealOption.photoLink = photoLink || mealOption.photoLink;\r\n        mealOption.optionName = optionName || mealOption.optionName;\r\n        mealOption.quantity = quantity || mealOption.quantity;\r\n        mealOption.ingredients = ingredients || mealOption.ingredients;\r\n        mealOption.price = price || mealOption.price;\r\n        mealOption.description = description || mealOption.description;\r\n        mealOption.unit = unit || mealOption.unit;\r\n\r\n        await user.save();\r\n\r\n        res.status(200).json({\r\n            message: 'Meal option updated successfully',\r\n            updatedMealOption: mealOption\r\n        });\r\n    } catch (error) {\r\n        console.error('Error updating meal option:', error);\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n});\r\n\r\n\r\n// PUT endpoint to edit a sub-menu option//\r\napp.put('/api/editSubMenuOption/:userId/:restaurantId/:menuOptionId/:subMenuOptionId', async (req, res) => {\r\n    try {\r\n        const { userId, restaurantId, menuOptionId, subMenuOptionId } = req.params;\r\n        const { photoLink, subMenuOptionName } = req.body;\r\n\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        const restaurant = user.restaurants.id(restaurantId);\r\n        if (!restaurant) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        const menuOption = restaurant.menuOptions.id(menuOptionId);\r\n        if (!menuOption) {\r\n            return res.status(404).json({ message: 'Menu option not found' });\r\n        }\r\n\r\n        const subMenuOption = menuOption.subMenuOptions.id(subMenuOptionId);\r\n        if (!subMenuOption) {\r\n            return res.status(404).json({ message: 'Sub-menu option not found' });\r\n        }\r\n\r\n        // Update the sub-menu option\r\n        subMenuOption.photoLink = photoLink || subMenuOption.photoLink;\r\n        subMenuOption.subMenuOptionName = subMenuOptionName || subMenuOption.subMenuOptionName;\r\n\r\n        await user.save();\r\n\r\n        res.status(200).json({\r\n            message: 'Sub-menu option updated successfully',\r\n            updatedSubMenuOption: subMenuOption\r\n        });\r\n    } catch (error) {\r\n        console.error('Error updating sub-menu option:', error);\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n});\r\n\r\n\r\n// Delete endpoint to remove a sub-menu option//\r\napp.delete('/api/removeSubMenuOption/:userId/:restaurantId/:menuOptionId/:subMenuOptionId', async (req, res) => {\r\n    try {\r\n        const { userId, restaurantId, menuOptionId, subMenuOptionId } = req.params;\r\n\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        const restaurant = user.restaurants.id(restaurantId);\r\n        if (!restaurant) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        const menuOption = restaurant.menuOptions.id(menuOptionId);\r\n        if (!menuOption) {\r\n            return res.status(404).json({ message: 'Menu option not found' });\r\n        }\r\n\r\n        // Remove the sub-menu option\r\n        menuOption.subMenuOptions.pull(subMenuOptionId);\r\n\r\n        await user.save();\r\n\r\n        res.status(200).json({ message: 'Sub-menu option removed successfully' });\r\n    } catch (error) {\r\n        console.error('Error removing sub-menu option:', error);\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n});\r\n\r\n\r\n\r\n// POST endpoint to add a new meal option under a specific subMenuOption\r\napp.post('/api/addMealOption/:userId/:restaurantId/:menuOptionId/:subMenuOptionId', async (req, res) => {\r\n    try {\r\n        const { userId, restaurantId, menuOptionId, subMenuOptionId } = req.params;\r\n        const newMealOption = req.body; // The new meal option data\r\n\r\n        // Validate the meal option data as necessary\r\n        // ...\r\n\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        const restaurant = user.restaurants.id(restaurantId);\r\n        if (!restaurant) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        const menuOption = restaurant.menuOptions.id(menuOptionId);\r\n        if (!menuOption) {\r\n            return res.status(404).json({ message: 'Menu option not found' });\r\n        }\r\n\r\n        const subMenuOption = menuOption.subMenuOptions.id(subMenuOptionId);\r\n        if (!subMenuOption) {\r\n            return res.status(404).json({ message: 'Sub-menu option not found' });\r\n        }\r\n\r\n        // Add the new meal option to the subMenuOption's mealOptions array\r\n        subMenuOption.mealOptions.push(newMealOption);\r\n\r\n        await user.save();\r\n\r\n        res.status(201).json({\r\n            message: 'New meal option added successfully',\r\n            newMealOption\r\n        });\r\n    } catch (error) {\r\n        console.error('Error adding new meal option:', error);\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n});\r\n\r\n\r\n//Put Endpoint to the edit a  restaurant//\r\n\r\napp.put('/api/editRestaurant/:userId/:restaurantId', async (req, res) => {\r\n    try {\r\n        const { userId, restaurantId } = req.params;\r\n        const { name, aboutUs, address, phoneNumber } = req.body;\r\n\r\n        // Find the user by userId\r\n        const user = await User.findById(userId);\r\n\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        // Find the restaurant by restaurantId within the user's restaurants array\r\n        const restaurantIndex = user.restaurants.findIndex(\r\n            (restaurant) => restaurant._id.toString() === restaurantId\r\n        );\r\n\r\n        if (restaurantIndex === -1) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        // Update the restaurant details\r\n        const restaurant = user.restaurants[restaurantIndex];\r\n        restaurant.name = name || restaurant.name;\r\n        restaurant.aboutUs = aboutUs || restaurant.aboutUs;\r\n        restaurant.address = address || restaurant.address;\r\n        restaurant.phoneNumber = phoneNumber || restaurant.phoneNumber;\r\n\r\n        await user.save();\r\n\r\n        res.status(200).json({\r\n            message: 'Restaurant updated successfully',\r\n            updatedRestaurant: restaurant,\r\n        });\r\n    } catch (error) {\r\n        console.error('Error updating restaurant:', error);\r\n        res.status(500).json({ message: 'Error updating restaurant' });\r\n    }\r\n});\r\n\r\n//Delete endpoint to the OptionMenu //\r\n\r\napp.delete('/api/removeOptionMenuRestaurants/:userId/:restaurantId/:menuOptionId', async (req, res) => {\r\n    const { userId, restaurantId, menuOptionId } = req.params;\r\n\r\n    try {\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        const restaurant = user.restaurants.id(restaurantId);\r\n        if (!restaurant) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        console.log(\"Current Menu Options:\", restaurant.menuOptions);\r\n\r\n        // Ensuring all menu options are valid objects and filtering out the one to remove\r\n        restaurant.menuOptions = restaurant.menuOptions.filter(option => option && option._id.toString() !== menuOptionId);\r\n\r\n        await user.save();\r\n\r\n        console.log(\"Updated Menu Options:\", restaurant.menuOptions);\r\n\r\n        res.status(200).json({ message: 'Menu option removed successfully' });\r\n    } catch (error) {\r\n        console.error('Error removing menu option:', error);\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n});\r\n\r\n//Put endpoint to edit an option added to a restaurant //\r\n\r\napp.put('/api/editOptionMenuRestaurants/:userId/:restaurantId/:menuOptionId', async (req, res) => {\r\n    try {\r\n        const { userId, restaurantId, menuOptionId } = req.params;\r\n        const { photoLink, optionName } = req.body; // Assuming these are the fields you want to update\r\n\r\n        // Find the user by userId\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n\r\n        // Find the restaurant by restaurantId\r\n        const restaurant = user.restaurants.id(restaurantId);\r\n        if (!restaurant) {\r\n            return res.status(404).json({ message: 'Restaurant not found' });\r\n        }\r\n\r\n        // Find the menu option by menuOptionId\r\n        const menuOption = restaurant.menuOptions.id(menuOptionId);\r\n        if (!menuOption) {\r\n            return res.status(404).json({ message: 'Menu option not found' });\r\n        }\r\n\r\n        // Update the menu option\r\n        if (photoLink) menuOption.photoLink = photoLink;\r\n        if (optionName) menuOption.optionName = optionName;\r\n\r\n        await user.save();\r\n\r\n        res.status(200).json({\r\n            message: 'Menu option updated successfully',\r\n            updatedOption: menuOption\r\n        });\r\n    } catch (error) {\r\n        console.error('Error updating menu option:', error);\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\napp.use(function (err, req, res, next) {\r\n    console.error(err);\r\n    res.status(500).send('Something broke!');\r\n});\r\n\r\nconst PORT = process.env.PORT || 8008;\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on port ${PORT}`);\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back-end/src/server.js b/back-end/src/server.js
--- a/back-end/src/server.js	(revision d178b92cf41c91e988ba9eda1317b786084f688f)
+++ b/back-end/src/server.js	(date 1706002458260)
@@ -63,6 +63,8 @@
     }
 });
 
+
+
 app.get('/api/userData', async (req, res) => {
     const token = req.headers.authorization?.split(' ')[1]; // Authorization: 'Bearer TOKEN'
 
Index: front-end/src/components/SubMenuOption.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\r\n  <div class=\"container\">\r\n    <div class=\"m-2 icon-container\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-bar-left\" viewBox=\"0 0 16 16\">\r\n        <path fill-rule=\"evenodd\" d=\"M12.5 15a.5.5 0 0 1-.5-.5v-13a.5.5 0 0 1 1 0v13a.5.5 0 0 1-.5.5M10 8a.5.5 0 0 1-.5.5H3.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L3.707 7.5H9.5a.5.5 0 0 1 .5.5\"/>\r\n      </svg>\r\n    </div>\r\n    <div>Restaurant: <strong>{{ restaurantName }}</strong></div>\r\n    <div>Optiune de meniu selectata: <strong>{{ menuOption }}</strong></div>\r\n    <div class=\"m-5\">\r\n      <button class=\"btn btn-secondary m-3\" @click=\"openDialog\">Adauga o categorie de meniu</button>\r\n      <button class=\"btn btn-secondary m-3\" @click=\"openNewDialog\">Adauga o optiune de masa</button>\r\n      <meal-option\r\n          v-if=\"newShowDialog\"\r\n          :restaurant-name=\"restaurantName\"\r\n          :menu-option=\"menuOption\"\r\n          :sub-menu-options=\"restaurantData.subMenuOptions\"\r\n          @meal-option-added=\"handleMealOptionAdded\"\r\n          @close=\"newShowDialog = false\">\r\n      </meal-option>\r\n    </div>\r\n    <div class=\"menu-layout\" v-if=\"restaurantData && restaurantData.subMenuOptions\">\r\n      <aside class=\"menu-sidebar\">\r\n        <ul class=\"submenu-list\">\r\n          <li v-for=\"(subMenuOption, index) in restaurantData.subMenuOptions\"\r\n              :key=\"index\"\r\n              :class=\"{ active: activeSubMenu === subMenuOption._id }\"\r\n              @click=\"setActiveSubMenu(subMenuOption._id)\">\r\n            <img :src=\"subMenuOption.photoLink\" alt=\"Menu item\" class=\"menu-option-image\">\r\n            <p class=\"sub-menu-title\">{{ subMenuOption.subMenuOptionName }}</p>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-pencil edit-icon m-4\"\r\n                 viewBox=\"0 0 16 16\" @click=\"editOption(subMenuOption)\">\r\n              <path\r\n                  d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\"\r\n              />\r\n            </svg>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-trash3 m-4\" viewBox=\"0 0 16 16\" @click=\"removeSubMenuItem(subMenuOption._id)\">\r\n              <path d=\"M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5\"/>\r\n            </svg>\r\n          </li>\r\n        </ul>\r\n      </aside>\r\n      <!-- Modified section -->\r\n      <main class=\"menu-main-content\">\r\n          <div v-if=\"activeSubMenu && groupedMealOptions[activeSubMenu]\">\r\n            <ul class=\"meal-list\">\r\n\r\n              <li v-for=\"mealOption in groupedMealOptions[activeSubMenu].mealOptions\" :key=\"mealOption._id\" class=\"meal-item\">\r\n\r\n                <img :src=\"mealOption.photoLink\" alt=\"Meal image\" class=\"meal-image\">\r\n                <div class=\"meal-content\">\r\n                  <h3>{{ mealOption.optionName }}</h3>\r\n                  <p class=\"meal-description\">{{ mealOption.description }}</p>\r\n                  <p class=\"meal-ingredients\"><strong>Ingredients:</strong> {{ mealOption.ingredients }}</p>\r\n                  <div class=\"meal-footer\">\r\n                    <span class=\"meal-quantity\">{{ mealOption.quantity }} {{ mealOption.unit }}</span>\r\n                    <span class=\"meal-price\">{{ mealOption.price }} RON</span>\r\n                  </div>\r\n                </div>\r\n                <div @click=\"openEditMealDialog(mealOption, activeSubMenu)\">\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-pencil edit-icon m-4\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\"/>\r\n                  </svg>\r\n                </div>\r\n                <div @click=\"deleteMealOption(mealOption._id, activeSubMenu)\">\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-trash3 m-4\" viewBox=\"0 0 16 16\" >\r\n                    <path d=\"M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5\"\r\n                    />\r\n                  </svg>\r\n                </div>\r\n\r\n              </li>\r\n            </ul>\r\n          </div>\r\n      </main>\r\n    </div>\r\n    <!--Adauga un subMenu-->\r\n    <div class=\"custom-dialog\" v-if=\"showDialog\">\r\n      <div class=\"custom-dialog-content\">\r\n        <h2>Adauga Submeniu Nou</h2>\r\n        <div class=\"form-group\">\r\n          <label for=\"photoLinkd\">Link poza:</label>\r\n          <input type=\"text\" id=\"photoLinkd\" v-model=\"subMenu.photoLink\" class=\"image-option\"/>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"itemName\">Nume categorie meniu:</label>\r\n          <input type=\"text\" id=\"itemName\" v-model=\"subMenu.optionName\"/>\r\n        </div>\r\n        <div class=\"dialog-buttons\">\r\n          <button class=\"btn btn-secondary cancel-button m-3\" @click=\"showDialog = false\">Renunta</button>\r\n          <button class=\"btn btn-primary add-button m-3\" @click=\"addSubMenuItem\">Adauga</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!--Editeaza categoria subMenu-->\r\n    <div class=\"custom-dialog\" v-if=\"showDialogOption\">\r\n      <div class=\"custom-dialog-content\">\r\n        <h2>Editeaza categoria meniu</h2>\r\n        <div class=\"mb-3\">\r\n          <label for=\"newName\" class=\"m-2\">Nume: </label>\r\n          <input v-if=\"newOptionSubMenu\" id=\"newName\" v-model=\"editingSubMenuOption.subMenuOptionName\"/>\r\n        </div>\r\n        <div class=\"mb-3\" >\r\n          <label for=\"newPhotoLink\" class=\"m-2\">Link poza: </label>\r\n          <input v-if=\"newOptionSubMenu\" id=\"newPhotoLink\" v-model=\"editingSubMenuOption.photoLink\"/>\r\n        </div>\r\n        <div class=\"dialog-buttons\">\r\n          <button @click=\"showDialogOption = false\">Renunta</button>\r\n          <button class=\"btn btn-primary add-button m-3\" @click=\"updateSubMenuItem(editingSubMenuOption._id)\">Editeaza</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!--Editeaza categoria MealOption-->\r\n    <div class=\"custom-dialog\" v-if=\"newMealCustomDialog\">\r\n      <div class=\"custom-dialog-content\">\r\n        <h2>Editeaza Optiune de masa </h2>\r\n        <div class=\"form-group\">\r\n          <label for=\"photoLink\">Link poza:</label>\r\n          <input type=\"text\" id=\"photoLink\" v-model=\"editingMealOption.photoLink\" class=\"form-control\"/>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"optionName\">Nume categorie masa:</label>\r\n          <input type=\"text\" id=\"optionName\" v-model=\"editingMealOption.optionName\" class=\"form-control\"/>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"quantity\">Cantitate</label>\r\n          <input type=\"number\" id=\"quantity\" v-model=\"editingMealOption.quantity\" class=\"form-control\"/>\r\n          <div>\r\n            <label for=\"unit\">Unitate:</label>\r\n            <select id=\"unit\" v-model=\"editingMealOption.unit\" class=\"form-control\">\r\n              <option value=\"grams\">Grame</option>\r\n              <option value=\"liters\">Litri</option>\r\n              <option value=\"pieces\">Bucata</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n\r\n          <label for=\"ingredients\">Ingrediente:</label>\r\n          <textarea id=\"ingredients\" v-model=\"editingMealOption.ingredients\" class=\"form-control\"></textarea>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"description\">Descriere:</label>\r\n          <textarea id=\"description\" v-model=\"editingMealOption.description\" class=\"form-control\"></textarea>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"price\">Pret:</label>\r\n          <input type=\"number\" id=\"price\" v-model=\"editingMealOption.price\" class=\"form-control\"/>\r\n        </div>\r\n        <div class=\"dialog-buttons\">\r\n          <button class=\"btn btn-secondary\" @click=\"newMealCustomDialog=false\">Renunta</button>\r\n          <button class=\"btn btn-primary\" @click=\"submitEditedMealOption\">Editeaza</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport api from \"@/api/api\";\r\nimport { getAuthToken } from \"@/utility/utility\";\r\nimport {mapGetters} from \"vuex\";\r\nimport MealOption from \"@/components/MealOption\";\r\nexport default {\r\n  components: {MealOption},\r\n  props: {\r\n    restaurantName: String,\r\n    menuOption: String,\r\n  },\r\n  data() {\r\n    return {\r\n      subMenu: {\r\n        photoLink: \"\",\r\n        optionName: \"\",\r\n      },\r\n      restaurantData: '',\r\n      userId: '',\r\n      restaurantId: '',\r\n      menuOptionId: '',\r\n      showDialog: false,\r\n      showDialogOption: false,\r\n      activeSubMenu: null,\r\n      activeMealOptions: [],\r\n      newShowDialog:false,\r\n      newMealCustomDialog:false,\r\n      newOptionSubMenu: { optionName: '', photoLink: '' },\r\n      editingSubMenuOption: {\r\n        optionName: '',\r\n        photoLink: '',\r\n        _id: ''\r\n      },\r\n      items: [],\r\n      newMealOption:{photoLink: '', optionName: '', description: '', ingredients: '', quantity: \"\", unit: \"\", price: \"\",\r\n      },\r\n      editingMealOption:{photoLink: \"\", optionName: \"\", quantity: \"\", ingredients: \"\", price: \"\", description: \"\", unit: \"\", categoryMenuOption: \"\",\r\n      },\r\n      subMenuOptions: [],  // Initialize as empty array\r\n      mealOption: {},      // Initialize as empty object\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getUserId: \"getUserId\"\r\n    }),\r\n    groupedMealOptions() {\r\n      const groupedOptions = {};\r\n      if (this.restaurantData && this.restaurantData.subMenuOptions) {\r\n        this.restaurantData.subMenuOptions.forEach(subMenuOption => {\r\n          groupedOptions[subMenuOption._id] = {\r\n            mealOptions: subMenuOption.mealOptions,\r\n            subMenuOptionId: subMenuOption._id\r\n          };\r\n        });\r\n      }\r\n      return groupedOptions;\r\n    },\r\n  },\r\n  methods: {\r\n    openDialog() {\r\n      this.showDialog = true;\r\n    },\r\n    openNewDialog(){\r\n      this.newShowDialog =true;\r\n    },\r\n    openEditMealDialog(mealOption, subMenuOptionId) {\r\n      console.log(\"Meal Option: \", mealOption);\r\n      console.log(\"Sub Menu Option ID: \", subMenuOptionId);\r\n\r\n      if (!mealOption || !subMenuOptionId) {\r\n        console.error(\"Meal option or sub-menu option is undefined\");\r\n        return;\r\n      }\r\n\r\n      this.editingMealOption = { ...mealOption };\r\n      this.editingSubMenuOption._id = subMenuOptionId;\r\n      this.newMealCustomDialog = true;\r\n    },\r\n\r\n    editOption(subMenuOption) {\r\n      this.editingSubMenuOption.subMenuOptionName = subMenuOption.subMenuOptionName;\r\n      this.editingSubMenuOption.photoLink = subMenuOption.photoLink;\r\n      this.editingSubMenuOption._id = subMenuOption._id;\r\n      this.showDialogOption = true;\r\n    },\r\n    getMealOptionsBySubMenu() {\r\n      const groupedMealOptions = {};\r\n      this.restaurantData.subMenuOptions.forEach(subMenu => {\r\n        groupedMealOptions[subMenu._id] = subMenu.mealOptions;\r\n      });\r\n      return groupedMealOptions;\r\n    },\r\n    setActiveSubMenu(subMenuId) {\r\n      this.activeSubMenu = subMenuId;\r\n      // ... rest of your code\r\n    },\r\n    addSubMenuItem() {\r\n      const newSubMenuItem = {\r\n        photoLink: this.subMenu.photoLink,\r\n        subMenuOptionName: this.subMenu.optionName,\r\n      };\r\n      api.post(\"/api/addSubOptionMenuRestaurants\", {\r\n        userId: this.$store.state.user.id,\r\n        name: this.restaurantName,\r\n        menuOptionName: this.menuOption,\r\n        newSubMenuItem,\r\n      })\r\n          .then(response => {\r\n            if (response.status === 201) {\r\n              if (!this.restaurantData.subMenuOptions) {\r\n                this.restaurantData.subMenuOptions = [];\r\n              }\r\n              this.restaurantData.subMenuOptions.push(newSubMenuItem);\r\n              this.subMenu.photoLink = \"\";\r\n              this.subMenu.optionName = \"\";\r\n              this.showDialog = false;\r\n            } else {\r\n              console.error(\"Error adding sub-menu item:\", response.data.message);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error(\"Error adding sub-menu item:\", error);\r\n          });\r\n    },\r\n    async submitEditedMealOption() {\r\n      if (!this.editingSubMenuOption._id) {\r\n        console.error(\"subMenuOptionId is not defined\");\r\n        return;\r\n      }\r\n      if (!this.userId || !this.restaurantId || !this.menuOptionId || !this.editingMealOption._id) {\r\n        console.error(\"Missing IDs for update request\");\r\n        return;\r\n      }\r\n\r\n      const url = `/api/updateMealOption/${this.userId}/${this.restaurantId}/${this.menuOptionId}/${this.editingSubMenuOption._id}/${this.editingMealOption._id}`;\r\n      try {\r\n        const response = await api.put(url, this.editingMealOption);\r\n        if (response.status === 200) {\r\n          this.fetchRestaurantData();\r\n          this.newMealCustomDialog = false;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error updating meal option:\", error);\r\n      }\r\n    },\r\n    async removeSubMenuItem(subMenuOptionId) {\r\n\r\n      if (!this.userId || !this.restaurantId || !this.menuOptionId) {\r\n        console.error(\"Missing IDs for deletion request\");\r\n        return;\r\n      }\r\n      try {\r\n        const response = await api.delete(`/api/removeSubMenuOption/${this.userId}/${this.restaurantId}/${this.menuOptionId}/${subMenuOptionId}`, {\r\n          headers: { Authorization: `Bearer ${getAuthToken()}` }\r\n        });\r\n        if (response.status === 200) {\r\n          // Remove the item from the local state\r\n          this.restaurantData.subMenuOptions = this.restaurantData.subMenuOptions.filter(item => item._id !== subMenuOptionId);\r\n        } else {\r\n          console.error(\"Error removing sub-menu item:\", response.data.message);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error removing sub-menu item:\", error);\r\n      }\r\n    },\r\n    async updateSubMenuItem(subMenuOptionId) {\r\n      if (!this.userId || !this.restaurantId || !this.menuOptionId || !subMenuOptionId) {\r\n        console.error(\"Missing IDs for update request\");\r\n        return;\r\n      }\r\n      try {\r\n        const response = await api.put(\r\n            `/api/editSubMenuOption/${this.userId}/${this.restaurantId}/${this.menuOptionId}/${subMenuOptionId}`,\r\n            this.editingSubMenuOption, {\r\n              headers: { Authorization: `Bearer ${getAuthToken()}` }\r\n            }\r\n        );\r\n        if (response.status === 200) {\r\n          // Update the local state to reflect the changes\r\n          const index = this.restaurantData.subMenuOptions.findIndex(item => item._id === subMenuOptionId);\r\n          if (index !== -1) {\r\n            this.restaurantData.subMenuOptions[index] = JSON.parse(JSON.stringify(this.editingSubMenuOption));\r\n          }\r\n          this.showDialogOption = false; // Close the dialog\r\n        } else {\r\n          console.error(\"Error updating sub-menu item:\", response.data.message);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error updating sub-menu item:\", error);\r\n      }\r\n    },\r\n    async deleteMealOption(mealOptionId, subMenuOptionId) {\r\n      console.log(\"Deleting meal option with IDs:\", mealOptionId, subMenuOptionId);\r\n      // Rest of your code...\r\n      if (!this.userId || !this.restaurantId || !this.menuOptionId) {\r\n        console.error(\"Required IDs are missing\");\r\n        return;\r\n      }\r\n      if (!subMenuOptionId || !mealOptionId) {\r\n        console.error(\"Invalid IDs for deletion\");\r\n        return;\r\n      }\r\n      const url = `/api/removeMealOption/${this.userId}/${this.restaurantId}/${this.menuOptionId}/${subMenuOptionId}/${mealOptionId}`;\r\n      try {\r\n        const response = await api.delete(url);\r\n        if (response.status === 200) {\r\n          // Update the local state to reflect the removal\r\n          const subMenuOption = this.restaurantData.subMenuOptions.find(item => item._id === subMenuOptionId);\r\n          if (subMenuOption) {\r\n            subMenuOption.mealOptions = subMenuOption.mealOptions.filter(meal => meal._id !== mealOptionId);\r\n          }\r\n          this.fetchRestaurantData(); // Update your local data\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error deleting meal option:\", error);\r\n      }\r\n    },\r\n\r\n    handleMealOptionAdded(newMealOption) {\r\n      this.updateSubMenuWithMealOption(newMealOption);\r\n      const currentPath = this.$route.path;\r\n      this.$router.replace({ path: '/empty' }).then(() => {\r\n        this.$router.replace({ path: currentPath });\r\n      });\r\n    },\r\n    updateSubMenuWithMealOption(mealOption) {\r\n      const submenu = this.restaurantData.subMenuOptions.find(subMenu => subMenu._id === mealOption.subMenuId);\r\n      if (submenu) {\r\n        submenu.mealOptions.push(mealOption);\r\n      }\r\n      this.newShowDialog=false;\r\n    },\r\n    async fetchRestaurantData() {\r\n      if (!this.restaurantName) {\r\n        console.error('Restaurant name is undefined');\r\n        return;\r\n      }\r\n      try {\r\n        const response = await api.get(`/api/restaurant/${encodeURIComponent(this.restaurantName)}`, {\r\n          headers: { Authorization: `Bearer ${getAuthToken()}` }\r\n        });\r\n        if (response && response.status === 200 && response.data) {\r\n          const menuOptionData = response.data.menuOptions.find((m) => m.optionName === this.menuOption);\r\n          this.restaurantData = menuOptionData || null;\r\n          this.restaurantId = response.data._id; // Set restaurantId from the response\r\n          if (menuOptionData) {\r\n            this.menuOptionId = menuOptionData._id; // Set menuOptionId\r\n          }\r\n        } else {\r\n          console.error('Failed to fetch restaurant details. Status:', response ? response.status : 'Unknown');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching restaurant details:', error);\r\n      }\r\n    },\r\n  },\r\n  async created() {\r\n    await this.fetchRestaurantData();\r\n    if (this.restaurantData.subMenuOptions && this.restaurantData.subMenuOptions.length > 0) {\r\n      this.setActiveSubMenu(this.restaurantData.subMenuOptions[0]._id);\r\n    }\r\n    this.userId = this.getUserId;\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 1200px;\r\n  margin: auto;\r\n}\r\n.menu-layout {\r\n  display: grid;\r\n  grid-template-columns: 1fr 3fr;\r\n  gap: 2rem;\r\n}\r\n.active {\r\n  background-color: #ddd; /* or any color you want for the active state */\r\n}\r\n.menu-sidebar {\r\n  background: #f9f9f9;\r\n  padding: 1rem;\r\n}\r\n.custom-dialog {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 60%;\r\n  max-width: 400px;\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  z-index: 1000;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\r\n}\r\n.custom-dialog-content input[type=\"text\"] {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n.menu-option-image {\r\n  width: 100px;\r\n  height: 100px;\r\n  object-fit: cover;\r\n  border-radius: 5px;\r\n}\r\n.edit-icon {\r\n  cursor: pointer;\r\n}\r\n.custom-dialog-content input[type=\"text\"] {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n.submenu-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n.submenu-list li {\r\n  padding: 0.5rem 0;\r\n}\r\n.menu-option-image {\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  margin-right: 10px;\r\n}\r\n.sub-menu-title {\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  margin: 0;\r\n}\r\n.menu-main-content {\r\n  background: #fff;\r\n  padding: 1rem;\r\n}\r\n.meal-list {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n.meal-item {\r\n  display: flex;\r\n  align-items: center;\r\n  border-bottom: 1px solid #eee;\r\n  margin-bottom: 1rem;\r\n  padding-bottom: 1rem;\r\n}\r\n.meal-image {\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 5px;\r\n  object-fit: cover;\r\n  margin-right: 1rem;\r\n}\r\n.meal-content {\r\n  flex: 1;\r\n}\r\n.meal-description {\r\n  font-style: italic;\r\n  margin: 0.5rem 0;\r\n}\r\n.meal-ingredients {\r\n  margin: 0;\r\n}\r\n.meal-footer {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 1rem;\r\n}\r\n.meal-quantity {\r\n  font-size: 0.9rem;\r\n}\r\n.meal-price {\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n.submenu-list li {\r\n  padding: 0.5rem 0;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n.active {\r\n  background-color: #ddd;\r\n  cursor: pointer;\r\n  color: #000;\r\n}\r\n.icon-container svg {\r\n  height: 24px;\r\n  width: 24px;\r\n  fill: currentColor;\r\n}\r\n.icon-container svg {\r\n  stroke-width: 2;\r\n}\r\n.icon-container {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n}\r\n</style>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front-end/src/components/SubMenuOption.vue b/front-end/src/components/SubMenuOption.vue
--- a/front-end/src/components/SubMenuOption.vue	(revision d178b92cf41c91e988ba9eda1317b786084f688f)
+++ b/front-end/src/components/SubMenuOption.vue	(date 1706002387175)
@@ -42,36 +42,36 @@
       </aside>
       <!-- Modified section -->
       <main class="menu-main-content">
-          <div v-if="activeSubMenu && groupedMealOptions[activeSubMenu]">
-            <ul class="meal-list">
+        <div v-if="activeSubMenu && groupedMealOptions[activeSubMenu]">
+          <ul class="meal-list">
 
-              <li v-for="mealOption in groupedMealOptions[activeSubMenu].mealOptions" :key="mealOption._id" class="meal-item">
+            <li v-for="mealOption in groupedMealOptions[activeSubMenu].mealOptions" :key="mealOption._id" class="meal-item">
 
-                <img :src="mealOption.photoLink" alt="Meal image" class="meal-image">
-                <div class="meal-content">
-                  <h3>{{ mealOption.optionName }}</h3>
-                  <p class="meal-description">{{ mealOption.description }}</p>
-                  <p class="meal-ingredients"><strong>Ingredients:</strong> {{ mealOption.ingredients }}</p>
-                  <div class="meal-footer">
-                    <span class="meal-quantity">{{ mealOption.quantity }} {{ mealOption.unit }}</span>
-                    <span class="meal-price">{{ mealOption.price }} RON</span>
-                  </div>
-                </div>
-                <div @click="openEditMealDialog(mealOption, activeSubMenu)">
-                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil edit-icon m-4" viewBox="0 0 16 16">
-                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"/>
-                  </svg>
-                </div>
-                <div @click="deleteMealOption(mealOption._id, activeSubMenu)">
-                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3 m-4" viewBox="0 0 16 16" >
-                    <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5"
-                    />
-                  </svg>
-                </div>
+              <img :src="mealOption.photoLink" alt="Meal image" class="meal-image">
+              <div class="meal-content">
+                <h3>{{ mealOption.optionName }}</h3>
+                <p class="meal-description">{{ mealOption.description }}</p>
+                <p class="meal-ingredients"><strong>Ingredients:</strong> {{ mealOption.ingredients }}</p>
+                <div class="meal-footer">
+                  <span class="meal-quantity">{{ mealOption.quantity }} {{ mealOption.unit }}</span>
+                  <span class="meal-price">{{ mealOption.price }} RON</span>
+                </div>
+              </div>
+              <div @click="openEditMealDialog(mealOption, activeSubMenu)">
+                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil edit-icon m-4" viewBox="0 0 16 16">
+                  <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"/>
+                </svg>
+              </div>
+              <div @click="deleteMealOption(mealOption._id, activeSubMenu)">
+                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3 m-4" viewBox="0 0 16 16" >
+                  <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5"
+                  />
+                </svg>
+              </div>
 
-              </li>
-            </ul>
-          </div>
+            </li>
+          </ul>
+        </div>
       </main>
     </div>
     <!--Adauga un subMenu-->
